#!/bin/bash
{{if not (eq .chezmoi.os "linux") -}}
exit 1
{{- end }}
#
# Installs packages once chezmoi setup is over
#

_isInstalled() {
    package="$1"
    {{ if (eq .chezmoi.osRelease.id "void")}}
    sudo xbps-query "${package}" &>/dev/null;
    {{/* else if (eq (get .chezmoi.osRelease "idLike") "arch") */}}
    {{ else if (eq .chezmoi.osRelease.id "arch") }}
    sudo paru -Qs "${package}" &>/dev/null;
    {{ else if (eq .chezmoi.osRelease.id "ubuntu") }}
    {{/* else if (eq (get .chezmoi.osRelease "idLike") "debian") */}}
    sudo dpkg -s "${package}" &>/dev/null;
    {{ end }}
    return $?
}

_installMany() {
    # The packages that are not installed will be added to this array
    toInstall=();

    for pkg; do
        # If package is installed, skip it
        _isInstalled "${pkg}"
        if [[ $? == 0 ]]; then
            echo "${pkg} is already installed.";
            continue;
        fi;

        # Otherwise, ask user if they want to add it to the list of packages
        read -p "Add ${pkg}?" -n 1 -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            toInstall+=("${pkg}");
        fi;
        printf "\n";

    done;

    # If package array is empty, don't do anything and stop the function
    if [[ "${toInstall[@]}" == "" ]] ; then
        echo "All packages are already installed.";
        return;
    fi;

    # Install all package added to array
    printf "Packages not installed:\n%s\n" "${toInstall[@]}";
    {{ if (eq .chezmoi.osRelease.id "void")}}
    xbps-install "${toInstall[@]}";
    {{/* else if (eq (get .chezmoi.osRelease "idLike") "arch") */}}
    {{ else if (eq .chezmoi.osRelease.id "arch") }}
    paru -S "${toInstall[@]}";
    {{/* else if (eq (get .chezmoi.osRelease "idLike") "debian") */}}
    {{ else if (eq .chezmoi.osRelease.id "ubuntu") }}
    sudo apt install "${toInstall[@]}";
    {{ end }}
}

_addPPA() {
    grep -h "^deb.*$1" /etc/apt/sources.list.d/* >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        echo "Adding ppa:$1";
        sudo add-apt-repository -y ppa:$1;
        sudo apt update;
        return 0;
    fi;
    return 1;
}

_exists() {
    if [[ $? -ne 0 ]]; then
        if ! command -v $1 >/dev/null 2>&1; then
            return 1;
        fi;
    else
        return 2;
    fi;
    return 0;
}

_chsh() {
    if [[ $? -ne 0 ]]; then
        if [[ "$(echo '$SHELL' | grep $1)" ]] ; then
           return 1;
        else
            sudo chsh -s "$(command -v $1)" "USER"
        fi;
    fi;
    return 0;
}



{{- if (eq .chezmoi.osRelease.id "void") }}
packages=("fish-shell" "neovim" "python3-neovim"
"nnn" "git" "delta" "base-devel" "jq" "fzf"
"curl");
# TODO: Missing packages
# i3status-rust (rust)
# swayr (rust)
# greetd (rust)
# rundird (zig)
# rofi-wayland (c)
# ripgrep (rust)
# bottom (rust)
# based-connect (c)
# zoxide (rust)
# bat (rust)
# hyperfine (rust)
# fd (rust)
# exa (rust)
# ydotool (c++)
read -p "Add sway desktop packages?" -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]; then
    packages+=("sway" "seatd" "polkit" "firefox" "foot" "NetworkManager"
    "wdisplays" "waylock" "gtk3-nocsd" "powertop" "bluez" "pipewire"
    "mps-youtube" "playerctl" "libnotify" "wl-clipboard" "copyq" "swayidle"
    "rofi-calc");
fi;
printf "\n";
{{/* else if (eq (get .chezmoi.osRelease "idLike") "arch") */}}
{{ else if (eq .chezmoi.osRelease.id "arch") }}
# Assumes we are running sway
# Checks if paru has been installed
{{ if not (lookPath "paru") }}
    sudo pacman -S --needed base-devel
    git clone https://aur.archlinux.org/paru.git ~
    cd paru
    makepkg -si
{{ end }}

packages=("sway" "fish" "neovim-nightly-bin" "git-delta-bin");
{{/* else if (eq (get .chezmoi.osRelease "idLike") "debian") */}}
    {{ if (eq .chezmoi.osRelease.id "ubuntu") }}
_installMany "software-properties-common" >/dev/null 2>&1
_addPPA "neovim-ppa/unstable"
_addPPA "fish-shell/release-3"
packages=("fish" "neovim" "python3-neovim" "nnn" "build-essential");
    {{ end }}
{{ end }}
_installMany "${packages[@]}";


{{- if not (lookPath "rustup") }}
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
{{ end }}

# Set fish as default shell
_chsh "fish" >/dev/null 2>&1
