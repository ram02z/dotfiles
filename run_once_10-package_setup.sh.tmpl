{{ if (eq .chezmoi.os "linux") -}}

#!/bin/bash
#
# Installs packages once chezmoi setup is over
#

_isInstalled() {
    package="$1"
    {{ if (eq .chezmoi.osRelease.id "void")}}
    sudo xbps-query "${package}" &>/dev/null;
    {{ else if (eq (get .chezmoi.osRelease "idLike") "arch") }}
    sudo paru -Qs "${package}" &>/dev/null;
    {{ else if (eq (get .chezmoi.osRelease "idLike") "debian") }}
    sudo dpkg -s "${package}" &>/dev/null;
    {{ end }}
    return $?
}

_installMany() {
    # The packages that are not installed will be added to this array
    notInstalled=();

    for pkg; do
        # If package is installed, skip it
        _isInstalled "${pkg}"
        if [[ $? == 0 ]]; then
            echo "${pkg} is already installed.";
            continue;
        fi;

        # Otherwise, ask user if they want to add it to the list of packages
        read -p "Add ${pkg}?" -n 1 -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            notInstalled+=("${pkg}");
        fi;
        printf "\n";

    done;

    # If package array is empty, don't do anything and stop the function
    if [[ "${notInstalled[@]}" == "" ]] ; then
        echo "All packages are already installed.";
        return;
    fi;

    # Install all package added to array
    printf "Packages not installed:\n";
    printf "%s\n" "${notInstalled[@]}";
    {{ if (eq .chezmoi.osRelease.id "void")}}
    sudo xbps-install -Sv "${notInstalled[@]}";
    {{ else if (eq (get .chezmoi.osRelease "idLike") "arch") }}
    sudo paru -S "${notInstalled[@]}";
    {{ else if (eq (get .chezmoi.osRelease "idLike") "debian") }}
    sudo apt install "${notInstalled[@]}";
    {{ end }}
}

_addPPA() {
    grep -h "^deb.*$1" /etc/apt/sources.list.d/* >/dev/null 2>&1
    if [[ $? != 0 ]]; then
        echo "Adding ppa:$1";
        sudo add-apt-repository -y ppa:$1;
        sudo apt update;
        return 0;
    fi;
    return 1;
}

_exists() {
    if ! command -v $1 >/dev/null 2>&1; then
        return 1;
    fi;
    return 0;
}

{{- if (eq .chezmoi.osRelease.id "void") }}
packages=("fish-shell" "neovim" "python3-neovim"
"nnn" "git" "delta" "base-devel" "jq" "fzf"
"curl" "ripgrep" "bottom" "zoxide" "bat" "fd"
"exa" "hyperfine" "rustup");
# TODO: Missing packages
# neovim-nightly (c)
# swayr or i3-focus-last & autotiling-rs (rust)
# greetd (rust)
# rofi-wayland (c)
# based-connect (c)
# ydotool (c++)
# auto-cpufreq (python)
# NOTE: Replace packages
# pam_rundir -> rundird
read -p "Add sway desktop packages?" -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]; then
    packages+=("sway" "seatd" "polkit" "firefox" "foot" "NetworkManager"
    "wdisplays" "waylock" "gtk3-nocsd" "powertop" "bluez" "pipewire" "pulseaudio-utils"
    "mps-youtube" "playerctl" "libnotify" "wl-clipboard" "CopyQ" "swayidle"
    "rofi-calc" "pam_rundir" "font-hack-ttf" "i3status-rust" "python3-i3ipc"
    "dejavu-fonts-ttf" "mesa-dri");
fi;
printf "\n";
{{ else if (eq (get .chezmoi.osRelease "idLike") "arch") }}
# Assumes we are running sway
# Checks if paru has been installed
{{ if not (lookPath "paru") }}
sudo pacman -S --needed base-devel
git clone https://aur.archlinux.org/paru.git ~
cd paru
makepkg -si
{{ end }}

packages=("sway" "fish" "neovim-nightly-bin" "git-delta-bin");
{{ else if (eq (get .chezmoi.osRelease "idLike") "debian") }}
    {{ if (eq .chezmoi.osRelease.id "ubuntu") }}
_installMany "software-properties-common" >/dev/null 2>&1
_addPPA "neovim-ppa/unstable"
_addPPA "fish-shell/release-3"
packages=("fish" "neovim" "python3-neovim" "nnn" "build-essential");
    {{ end }}
{{ end }}
_installMany "${packages[@]}";

{{- if and (lookPath "curl") (not (lookPath "rustup")) }}
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh;
{{ end }}
# vim: ft=sh
{{- end }}
