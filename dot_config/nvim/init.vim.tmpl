set nocompatible
filetype plugin indent on
{{- if (ne .chezmoi.os "windows") }}
" Install vimplug
if ! filereadable(expand('~/.config/nvim/autoload/plug.vim'))
    echo 'Downloading junegunn/vim-plug to manage plugins...'
    silent !mkdir -p ~/.config/nvim/autoload/
    silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > ~/.config/nvim/autoload/plug.vim
    augroup plug
        au!
        au VimEnter * PlugInstall
    augroup END
endif

" Plug manager
call plug#begin()

" Editor config woohoo
Plug 'editorconfig/editorconfig-vim'

" Fix CursorHold Performance
" Remove if https://github.com/neovim/neovim/issues/12587 gets closed
Plug 'antoinemadec/FixCursorHold.nvim'

" Neovim's (not yet) inbuilt lsp plugin config
Plug 'neovim/nvim-lspconfig'
Plug 'kabouzeid/nvim-lspinstall'

" Completion support
Plug 'hrsh7th/nvim-compe'

" Code snippets
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'

" File manager
Plug 'mcchrish/nnn.vim'

" Fuzzy finder
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
" FZF native
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }

" Reloads neovim
Plug 'famiu/nvim-reload', {'on': ['Reload', 'Restart']}

" Comments stuff out
" Plug 'preservim/nerdcommenter', {'on': '<Plug>NERDCommenterToggle'}
Plug 'b3nj5m1n/kommentary'

" Lua easymotion-like plugin
Plug 'phaazon/hop.nvim'

" Highlight vim's builtin 'f' command
Plug 'unblevable/quick-scope'

" Start screen for vim (vim-startify is slow)
" Plug 'mhinz/vim-startify'
Plug 'glepnir/dashboard-nvim'

" Vim fancy status bar
" Plug 'hoob3rt/lualine.nvim'
Plug 'glepnir/galaxyline.nvim'
" Library for generating statusline components
Plug 'nvim-lua/lsp-status.nvim'

" NVIM icons wow
Plug 'kyazdani42/nvim-web-devicons'
Plug 'yamatsum/nvim-nonicons'

" Vim fancy tab line
" Plug 'romgrk/barbar.nvim'
Plug 'akinsho/nvim-bufferline.lua'

" Dracula theme
Plug 'ram02z/vim', {'as': 'dracula', 'branch': 'nvim_plugs'}

" Git integration
" Plug 'tpope/vim-fugitive'
" Plug 'airblade/vim-gitgutter'
" Plug 'rhysd/git-messenger.vim'
Plug 'lewis6991/gitsigns.nvim'

" Auto pair plugin
" Plug 'windwp/nvim-autopairs'
Plug 'steelsojka/pears.nvim'

" Color Highlighting !!!
Plug 'norcalli/nvim-colorizer.lua'

" Remember last position of file
Plug 'farmergreg/vim-lastplace'

" Rainbow paranthesis
" Plug 'luochen1990/rainbow'
Plug 'p00f/nvim-ts-rainbow'

" Indentation lines
Plug 'lukas-reineke/indent-blankline.nvim', {'branch': 'lua'}

" Loads of language syntax highlighting
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
Plug 'romgrk/nvim-treesitter-context'
Plug 'nvim-treesitter/nvim-treesitter-refactor'
Plug 'nvim-treesitter/playground'

" Multiple cursor
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

" Removes annoying search highlighting
Plug 'romainl/vim-cool'

" Useful quickfix settings
Plug 'romainl/vim-qf'

" Vimrc commands in lua
Plug 'svermeulen/vimpeccable'

" Extending the % functionality
" Plug 'andymass/vim-matchup'

" Handy binds (disabled due to high startup time)
" Plug 'tpope/vim-unimpaired'

" To profile startup
Plug 'dstein64/vim-startuptime', {'on': 'StartupTime'}

" Easily deal with 'surroundings'
Plug 'machakann/vim-sandwich'

" Peek at lines when searching
Plug 'nacro90/numb.nvim'

" Automatically create non-existant directory
Plug 'pbrisbin/vim-mkdir'

" Extended Increment and decrement
Plug 'monaqa/dial.nvim'

" Smooth scrolling
Plug 'karb94/neoscroll.nvim'

" Highlight cursor word matches
Plug 'RRethy/vim-illuminate'

{{ if .is_wsl -}}
Plug 'dstein64/nvim-scrollview'
{{ end -}}

call plug#end()
{{ end }}


"
" Cross platform tweaks
"

" Change leader to space
let mapleader = "\<Space>"

" disables continuing comments
autocmd BufNewFile,BufRead * setlocal formatoptions-=cro

" Disables folding
set nofoldenable

" Set the current directory automatically
set autochdir

" Silent remap function
function! Map(lhs, rhs, modes)
    for m in a:modes
        execute m.'noremap' '<silent>' a:lhs a:rhs
    endfor
endfunction

" Swap two lines
nnoremap <silent> <A-j> :m .+1<CR>==
nnoremap <silent> <A-k> :m .-2<CR>==
inoremap <silent> <A-j> <Esc> :m .+1<CR>==gi
inoremap <silent> <A-k> <Esc> :m .-2<CR>==gi
vnoremap <silent> <A-j> :m '>+1<CR>==gv
vnoremap <silent> <A-k> :m '<-2<CR>==gv

{{ if (ne .chezmoi.os "windows") }}
" Unix line endings
set fileformats=unix

" True terminal colors
set termguicolors

" Apply the indentation of current to next
set autoindent

" Relative line number
set number
set relativenumber
" Toggle line numbering (useful when copying mutliple lines)
nnoremap <silent> <leader>d :set nu! rnu! <CR>

" Enable hidden buffers (don't need to save when switching files)
set hidden

" Search settings
set hlsearch
set smartcase

{{ if .is_wsl }}
" WSL yank support
let s:clip = '/mnt/c/Windows/System32/clip.exe'
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
    augroup END
endif
{{ else }}
" System clipboard support
set clipboard+=unnamedplus
{{ end -}}

" Create terminal buffer
nnoremap <silent> <Leader><CR> :term<CR>

" Nnn command override
let g:nnn#command = 'n'

" Start nnn in current buffer
let g:nnn#set_default_mappings = 0
nnoremap <leader>n :NnnPicker %:p:h<CR>

" Run nnn as a floating window
let g:nnn#layout = { 'window': { 'width': 0.9, 'height': 0.6, 'highlight': 'Debug' } }

let g:nnn#replace_netrw = 1

" NNN binds
let g:nnn#action = {
      \ '<c-t>': 'tab split',
      \ '<c-x>': 'split',
      \ '<c-v>': 'vsplit' }

"
" UI
"
{{ if .is_wsl }}
" Hold shift to disable
set mouse=a
{{ else }}
let g:dracula_colorterm = 0
{{ end }}
colorscheme dracula

" Enable rainbow
" let g:rainbow_active = 1

" nmap <C-_> <Plug>NERDCommenterToggle
" vmap <C-_> <Plug>NERDCommenterToggle<CR>gv
" imap <C-_> <esc><Plug>NERDCommenterToggle gi
"
" " Add spaces after comment delimiters by default
" let g:NERDSpaceDelims = 1
"
" " Use compact syntax for prettified multi-line comments
" let g:NERDCompactSexyComs = 1
"
" " Allow commenting and inverting empty lines (useful when commenting a region)
" let g:NERDCommentEmptyLines = 1
"
" " Enable trimming of trailing whitespace when uncommenting
" let g:NERDTrimTrailingWhitespace = 1
"
" " Enable NERDCommenterToggle to check all selected lines is commented or not
" let g:NERDToggleCheckAllLines = 1"
"
" let g:NERDCustomDelimiters = {
"     \ 'dosini': { 'left': '#' }
" \ }

" vim-matchup config
" let g:matchup_matchparen_enabled = 0

" let g:matchup_delim_noskips = 2

" nvim-reload mappings
nnoremap <silent> <Leader>r :Reload<CR>
nnoremap <silent> <Leader>R :Restart<CR>

" dial.nvim mappings
nmap <C-a> <Plug>(dial-increment)
nmap <C-x> <Plug>(dial-decrement)
vmap <C-a> <Plug>(dial-increment)
vmap <C-x> <Plug>(dial-decrement)

" dashboard-nvim settings
let g:dashboard_custom_header = [
\ '',
\ '',
\ '',
\ '',
\ '',
\ '[ dashboard ]',
\ '',
\ '',
\ '',
\ '',
\ '',
\ ]

let g:dashboard_custom_footer = [
\ '',
\ 'neovim loaded '. len(keys(g:plugs)) .' plugins ',
\ '',
\ ]

let g:dashboard_default_executive = "telescope"

nmap <Leader>ss :<C-u>SessionSave<CR>
nmap <Leader>sl :<C-u>SessionLoad<CR>
nnoremap <silent> <Leader>cn :DashboardNewFile<CR>

function! NnnDotFiles()
    if isdirectory($HOME.'/.local/share/chezmoi/dot_config/')
        NnnPicker $HOME/.local/share/chezmoi/dot_config
    else
        NnnPicker $HOME/.config
    endif
endfunction

let g:dashboard_custom_section={
	\ 'last_session' :{
        \ 'description': ['   Open last session                       SPC sl   '],
        \ 'command':function('dashboard#handler#last_session')},
    \ 'find_history' :{
        \ 'description': ['   ﭯ Recently opened files                   SPC ph   '],
        \ 'command':function('dashboard#handler#find_history')},
    \ 'find_file'    :{
        \ 'description': ['    Find File                               SPC pg   '],
        \ 'command':function('dashboard#handler#find_file')},
    \ 'find_word'    :{
        \ 'description': ['    Find word                               SPC pl   '],
        \ 'command': function('dashboard#handler#find_word')},
    \ 'book_marks'   :{
        \ 'description': ['    Jump to book marks                      SPC pm   '],
        \ 'command':function('dashboard#handler#book_marks')},
    \ 'update_plugins'   :{
        \ 'description': ['   ↑ Update plugins                                   '],
        \ 'command': 'PlugUpdate'},
    \ 'dot_files'   :{
        \ 'description': ['   • Dot files                               SPC gd   '],
        \ 'command': function('NnnDotFiles')},
    \ }

nnoremap <silent> <Leader>fd :call NnnDotFiles()<CR>

"
" Misc
"

" detect zig files
au! BufRead,BufNewFile *.zig set filetype=zig
au! BufRead,BufNewFile *.zir set filetype=zir

" detect fish files
au! BufRead,BufNewFile *.fish set filetype=fish

" removes annoying paren highlighting
let g:loaded_matchparen=1

" Leave terminal insert mode using Ctrl+]
" C-[ is an alternative for <Esc>
tnoremap <silent> <C-]> <C-\><C-n>


" Quickfix plugin settings
let g:qf_shorten_path = 3

nmap ]q <Plug>(qf_qf_previous)
nmap [q <Plug>(qf_qf_next)

nmap ]l <Plug>(qf_loc_previous)
nmap [l <Plug>(qf_loc_next)

nmap cq <Plug>(qf_qf_toggle)
nmap cl <Plug>(qf_loc_toggle)
nmap cs <Plug>(qf_qf_switch)

" Snippet binds (moved to init.lua)
"inoremap <silent><expr> <C-Space> compe#complete()
" inoremap <silent><expr> <CR>      compe#confirm({ 'keys': "\<Plug>delimitMateCR", 'mode': '' })
" inoremap <silent><expr> <C-e>     compe#close('<C-e>')
" inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Blankline plugin settings
set colorcolumn=99999 " fix weird cursor artifacts #59
let g:indent_blankline_show_first_indent_level = v:false
let g:indent_blankline_show_current_context = v:true
highlight IndentColor guifg=#5E6068
let g:indent_blankline_context_highlight = 'IndentColor'

let g:indent_blankline_filetype_exclude = ['help', 'vimwiki', 'man', 'dashboard', 'TelescopePrompt']

let g:indent_blankline_buftype_exclude = ['terminal']
let g:indent_blankline_space_char_blankline = ' '
let g:indent_blankline_strict_tabs = v:true
let g:indent_blankline_debug = v:true
let g:indent_blankline_context_patterns = [
    \"class",
    \"function",
    \"method",
    \"^if",
    \"while",
    \"for",
    \"with",
    \"case",
    \"func_literal",
    \"block",
    \"try",
    \"except",
    \"argument_list",
    \"object",
    \"dictionary",
    \"table",
    \]

" vim-illuminate config

let g:Illuminate_delay = 500

let g:Illuminate_ftblacklist = ['TelescopePrompt', 'dashboard', 'vimwiki', 'man', 'help', 'nnn']

" quickscope config
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
highlight QuickScopePrimary guifg='#ff007c' gui=underline ctermfg=155 cterm=underline
highlight QuickScopeSecondary guifg='#2b8db3' gui=underline ctermfg=81 cterm=underline

" abbreviate chezmoi apply
ab ca !chezmoi apply

" Source lua init file
lua require('init')

{{ else -}}
nnoremap <silent> <C-/> <Plug>NERDCommenterToggle
vnoremap <silent> <C-/> <Plug>NERDCommenterToggle<CR>gv
inoremap <silent> <C-/> <esc><Plug>NERDCommenterToggle gi

{{- end -}}
