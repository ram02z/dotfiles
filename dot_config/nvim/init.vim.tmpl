set nocompatible
filetype plugin indent on
{{- if (ne .chezmoi.os "windows") }}
" Install vimplug
if ! filereadable(expand('~/.config/nvim/autoload/plug.vim'))
    echo 'Downloading junegunn/vim-plug to manage plugins...'
    silent !mkdir -p ~/.config/nvim/autoload/
    silent !curl "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" > ~/.config/nvim/autoload/plug.vim
    augroup plug
        au!
        au VimEnter * PlugInstall
    augroup END
endif

" Plug manager
call plug#begin()

" Neovim's (not yet) inbuilt lsp plugin config
Plug 'neovim/nvim-lspconfig'

" Completion support
Plug 'hrsh7th/nvim-compe'

" Code snippets
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'

" File manager
Plug 'mcchrish/nnn.vim'

" Fuzzy finder
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
" FZF native
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }

" Reloads neovim
Plug 'famiu/nvim-reload', {'on': ['Reload', 'Restart']}

" Comments stuff out
Plug 'preservim/nerdcommenter', {'on': '<Plug>NERDCommenterToggle'}

" Start screen for vim
Plug 'mhinz/vim-startify'

" Vim fancy status bar
" Plug 'hoob3rt/lualine.nvim'
Plug 'glepnir/galaxyline.nvim'

" NVIM icons wow
Plug 'kyazdani42/nvim-web-devicons'

" Vim fancy tab line
Plug 'romgrk/barbar.nvim'

" Dracula theme
Plug 'dracula/vim', {'as': 'dracula'}

" Git integration
" Plug 'tpope/vim-fugitive'
" Plug 'airblade/vim-gitgutter'
" Plug 'rhysd/git-messenger.vim'
Plug 'lewis6991/gitsigns.nvim'

" Auto pair (enable when more stable)
" Plug 'steelsojka/pears.nvim'
Plug 'windwp/nvim-autopairs'

" Color Highlighting !!!
Plug 'norcalli/nvim-colorizer.lua'

" Remember last position of file
Plug 'farmergreg/vim-lastplace'

" Rainbow paranthesis
" Plug 'luochen1990/rainbow'

" Indentation lines
Plug 'lukas-reineke/indent-blankline.nvim', {'branch': 'lua'}

" Loads of language syntax highlighting
" Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
Plug 'romgrk/nvim-treesitter-context'
Plug 'nvim-treesitter/nvim-treesitter-refactor'
" Pair html tags
Plug 'windwp/nvim-ts-autotag'

" Multiple cursor
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

" Removes annoying search highlighting
Plug 'romainl/vim-cool'

" Useful quickfix settings
Plug 'romainl/vim-qf'

" Vimrc commands in lua
Plug 'svermeulen/vimpeccable'

" Extending the % functionality
Plug 'andymass/vim-matchup'

" Handy binds (disabled due to high startup time)
" Plug 'tpope/vim-unimpaired'

" To profile startup
Plug 'dstein64/vim-startuptime', {'on': 'StartupTime'}

" fish syntax (remove if treesitter gets support)
Plug 'blankname/vim-fish', {'for': 'fish'}

{{ if .is_wsl -}}
Plug 'dstein64/nvim-scrollview'
{{ end -}}

call plug#end()
{{ end }}

"
" Cross platform tweaks
"

" Change leader to space
let mapleader = "\<Space>"

" Silent remap function
function! Map(lhs, rhs, modes)
    for m in a:modes
        execute m.'noremap' '<silent>' a:lhs a:rhs
    endfor
endfunction

" Swap two lines
nnoremap <silent> <C-j> :m .+1<CR>==
nnoremap <silent> <C-k> :m .-2<CR>==
inoremap <silent> <C-j> <Esc> :m .+1<CR>==gi
inoremap <silent> <C-k> <Esc> :m .-2<CR>==gi
vnoremap <silent> <C-j> :m '>+1<CR>==gv
vnoremap <silent> <C-k> :m '<-2<CR>==gv

{{ if (ne .chezmoi.os "windows") }}
" Unix line endings
set fileformats=unix

" True terminal colors
set termguicolors

" Tabbing the right way
set tabstop=4
set shiftwidth=4
set expandtab

" Relative line number
set number
set relativenumber
" Toggle line numbering (useful when copying mutliple lines)
nnoremap <silent> <leader>d :set nu! rnu! <CR>

" Enable hidden buffers (don't need to save when switching files
set hidden

{{ if .is_wsl }}
" WSL yank support
let s:clip = '/mnt/c/Windows/System32/clip.exe'
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
    augroup END
endif
{{ else }}
" System clipboard support
set clipboard+=unnamedplus
{{ end -}}

" Create terminal buffer
nnoremap <silent> <Leader><CR> :term <CR>

" Nnn command override
let g:nnn#command = 'n'

" Start nnn in current buffer
let g:nnn#set_default_mappings = 0
nnoremap <leader>n :NnnPicker %:p:h<CR>

" Run nnn as a floating window
let g:nnn#layout = { 'window': { 'width': 0.9, 'height': 0.6, 'highlight': 'Debug' } }

" NNN binds
let g:nnn#action = {
      \ '<c-t>': 'tab split',
      \ '<c-x>': 'split',
      \ '<c-v>': 'vsplit' }

"
" UI
"
{{ if .is_wsl }}
colorscheme dracula
" Hold shift to disable
set mouse=a
{{ else }}
colorscheme dracula
hi Normal guibg=NONE ctermbg=NONE
{{ end }}

" Tab autohide
let bufferline = get(g:, 'bufferline', {})
let bufferline.auto_hide = v:true

" Enable rainbow
" let g:rainbow_active = 1

nmap <C-_> <Plug>NERDCommenterToggle
vmap <C-_> <Plug>NERDCommenterToggle<CR>gv
imap <C-_> <esc><Plug>NERDCommenterToggle gi

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1"

let g:NERDCustomDelimiters = {
    \ 'dosini': { 'left': '#' }
\ }

" vim-matchup config
let g:matchup_matchparen_enabled = 0

let g:matchup_delim_noskips = 2

" nvim-reload config
nnoremap <silent> <Leader>r :Reload<CR>


"
" Misc
"
" detect zig files
au BufRead,BufNewFile *.zig set filetype=zig
au BufRead,BufNewFile *.zir set filetype=zir


" removes annoying paren highlighting
let g:loaded_matchparen=1

"
" buffer manipulation using leader + key
"

" Leave terminal insert mode using Ctrl+[ 
tnoremap <silent> <C-[> <C-\><C-n>

" Magic buffer picker
nnoremap <silent> <Leader><Leader> :BufferPick<CR>
" Ordering
nnoremap <silent> <Leader>, :BufferPrevious<CR>
nnoremap <silent> <Leader>. :BufferNext<CR>
nnoremap <silent> <Leader>> :BufferMoveNext<CR>
nnoremap <silent> <Leader>< :BufferMovePrevious<CR>
" Position
nnoremap <silent> <Leader>1 :BufferGoto 1<CR>
nnoremap <silent> <Leader>2 :BufferGoto 2<CR>
nnoremap <silent> <Leader>3 :BufferGoto 3<CR>
nnoremap <silent> <Leader>4 :BufferGoto 4<CR>
nnoremap <silent> <Leader>5 :BufferGoto 5<CR>
nnoremap <silent> <Leader>6 :BufferGoto 6<CR>
nnoremap <silent> <Leader>7 :BufferGoto 7<CR>
nnoremap <silent> <Leader>8 :BufferGoto 8<CR>
nnoremap <silent> <Leader>9 :BufferGoto 9<CR>
" Last used buffer
nnoremap <silent> <Leader>l :e#<CR>
" Close buffer
nnoremap <silent> <Leader>q :BufferClose!<CR>

" Quickfix plugin settings
let g:qf_shorten_path = 3

nmap ]q <Plug>(qf_qf_previous)
nmap [q <Plug>(qf_qf_next)

nmap ]l <Plug>(qf_loc_previous)
nmap [l <Plug>(qf_loc_next)

nmap cq <Plug>(qf_qf_toggle)
nmap cl <Plug>(qf_loc_toggle)
nmap cs <Plug>(qf_qf_switch)

" Snippet binds (moved to init.lua)
"inoremap <silent><expr> <C-Space> compe#complete()
" inoremap <silent><expr> <CR>      compe#confirm({ 'keys': "\<Plug>delimitMateCR", 'mode': '' })
" inoremap <silent><expr> <C-e>     compe#close('<C-e>')
" inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Blankline plugin settings
let g:indent_blankline_char = "|"
let g:indent_blankline_show_first_indent_level = v:false
let g:indent_blankline_show_current_context = v:true
let g:indent_blankline_filetype_exclude = ["help", "defx", "vimwiki", "man"]
let g:indent_blankline_buftype_exclude = ["terminal"]
let g:indent_blankline_space_char_blankline = " "
let g:indent_blankline_strict_tabs = v:true
let g:indent_blankline_debug = v:true
let g:indent_blankline_context_patterns = [
    \"class",
    \"function",
    \"method",
    \"^if",
    \"while",
    \"for",
    \"with",
    \"case",
    \"func_literal",
    \"block",
    \"try",
    \"except",
    \"argument_list",
    \"object",
    \"dictionary",
    \]

" Source lua init file
lua require('init')

{{ else -}}
nnoremap <silent> <C-/> <Plug>NERDCommenterToggle
vnoremap <silent> <C-/> <Plug>NERDCommenterToggle<CR>gv
inoremap <silent> <C-/> <esc><Plug>NERDCommenterToggle gi

{{- end -}}
