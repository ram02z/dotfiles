set nocompatible
filetype plugin on

" Change leader to space
let mapleader = "\<Space>"

" Disables folding
set nofoldenable

{{ if (eq .chezmoi.os "linux") }}
" Unix line endings
set fileformats=unix
{{ end }}

" True terminal colors
set termguicolors

" Relative line number
set number relativenumber
" Toggle line numbering (useful when copying mutliple lines)
autocmd TermOpen * setlocal nonumber norelativenumber

" Fixed size signcolumn
set signcolumn=yes:1

" Enable hidden buffers (don't need to save when switching files)
set hidden

" Search settings
set hlsearch
set ignorecase
set smartcase

" Break words rather than characters when wrapping
set wrap
set linebreak

" Show confirm dialog
set confirm

" No eol in visual block mode
set virtualedit=block

" disables continuing comments
au FileType * setlocal formatoptions-=cro

" Make undo history persistent
if has("persistent_undo")
    au BufWritePre /tmp/*, BufReadPost COMMIT_EDITMSG,MERGE_MSG File setlocal noundofile
    set undofile
endif

" paste from (primary) clipboard
if has('clipboard')
    nmap <C-p> "*p
    vmap <c-p> "*pgv
    imap <C-p> <C-o>"*p
endif
command! PurgeUndoFiles lua require('utils.misc').purge_old_undos()

{{ if (eq .chezmoi.os "linux") }}
    {{ if .is_wsl }}
let s:clip = '/mnt/c/Windows/System32/clip.exe'
    {{ else if .is_wayland }}
let s:clip = 'wl-copy'
    {{ else if .is_x11 }}
let s:clip = 'xclip'
{{ end }}
{{ else if (eq .chezmoi.os "windows")}}
let s:clip = 'C:\Windows\System32\clip.exe'
{{ else if (eq .chezmoi.os "darwin") }}
let s:clip = 'pbcopy'
{{ end -}}

if executable(s:clip)
    augroup Yank
        autocmd!
        autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
    augroup END
endif

{{ if .is_wsl }}
" Hold shift to disable
set mouse=a
{{ end }}


" removes annoying paren highlighting
" let g:loaded_matchparen=0
autocmd VimEnter * NoMatchParen

set colorcolumn=99999 " fix weird cursor artifacts indent-blankline #59

ab ca !chezmoi apply

"
" # Autocmds and plugin settings
"

{{ if not .is_wsl }}
let g:dracula_colorterm = 0
{{ end }}

" TODO: test this
" autocmd FileType * call vsnip#get_complete_items(bufnr())

" start terminal in insert mode
autocmd TermOpen * startinsert

" Basically vim-highlightedyank
augroup YankHighlight
    autocmd!
    au TextYankPost * silent! lua vim.highlight.on_yank{ timeout=500 }
augroup END

" start help page in left vsplit
" Helper function for helpvsplit
" from https://vi.stackexchange.com/a/8927
function! BufferWidth() abort
  let view = winsaveview()
  let max_col = 0
  g/^/let max_col=max([max_col, col('$') - 1])
  call histdel('search', -1)
  let @/ = histget('search', -1)
  call winrestview(view)
  return max_col
endfunction

" Sets help window to left vsplit and resizes to max
" Doesn't do anything if buffer width is too large
function! s:helpvsplit()
  if &buftype == 'help'
    let l:bufwidth = BufferWidth()
    if &columns > l:bufwidth*2
      wincmd H
      exec 'vertical resize '. string(bufwidth)
    endif
  endif
endfunction
autocmd BufEnter *.txt call s:helpvsplit()

" TODO: move to lua config
function! NnnDotFiles()
    if isdirectory($HOME.'/.local/share/chezmoi/dot_config/')
        NnnPicker $HOME/.local/share/chezmoi/dot_config
    else
        NnnPicker $HOME/.config
    endif
endfunction

nnoremap <silent> <Leader>fd :call NnnDotFiles()<CR>

" Used for textmanip
" TODO: move to plugin config
let g:textmanip_hooks = {}
function! g:textmanip_hooks.finish(tm)
  let tm = a:tm
  let helper = textmanip#helper#get()
  if tm.linewise
    call helper.indent(tm)
  else
    " When blockwise move/duplicate, remove trailing white space.
    " To use this feature without feeling counterintuitive,
    " I recommend you to ':set virtualedit=block',
    call helper.remove_trailing_WS(tm)
  endif
endfunction

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,WinEnter * if &nu  | set rnu   | endif
  autocmd BufLeave,FocusLost,WinLeave   * if &nu  | set nornu | endif
augroup END

autocmd FileType dashboard set showtabline=0 | autocmd WinLeave <buffer> if len(getbufinfo({'buflisted':1})) > 2 | set showtabline=2 | endif


" Source lua config
lua require('init')

