{{ $servers := 0 }}
-- Define enabled servers
local servers = {
{{ if lookPath "rust-analyzer" -}}
rust_analyzer = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "gopls" -}}
gopls = {
  filetypes = { "go", "gomod", "gotmpl", "chezmoitmpl" },
  settings = {
    gopls = {
      staticcheck = true,
      semanticTokens = true,
      analyses = {
        nilness = true,
        unusedparams = true,
        unusedvariable = true,
        unusedwrite = true,
        useany = true,
        ST1000 = true,
        ST1003 = true,
        ST1020 = true,
        ST1022 = true,
      },
    },
  },
},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "clangd" -}}
clangd = {
  filetypes = { "c", "cpp" },
  server = {
    cmd = {
      "clangd", "--background-index", "--pch-storage=memory",
      "--clang-tidy", "--enable-config", "--header-insertion=iwyu"
    },
  },
},
{{- $servers = add1 $servers -}}
{{ else if lookPath "ccls" -}}
ccls = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "pyright" -}}
pyright = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "vscode-html-language-server" -}}
html = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "vscode-css-language-server" -}}
cssls = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "vscode-json-language-server" -}}
jsonls = {
  settings = {
    json = {
      schemas = require("schemastore").json.schemas(),
    },
  },
},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "vscode-eslint-language-server" -}}
eslint = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "texlab" -}}
texlab = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "lua-language-server" -}}
lua_ls = {
  autostart = false,
  settings = {
    Lua = {
      runtime = {
        version = "LuaJIT",
        path = vim.split(package.path, ";"),
      },
      workspace = {
        library = vim.api.nvim_get_runtime_file('', true),
        maxPreload = 2000,
        preloadFileSize = 50000,
      },
      diagnostics = {
        globals = { "vim" },
      },
      telemetry = { enable = false },
    },
  },
},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "vtsls" }}
vtsls = {},
{{ else if lookPath "typescript-language-server" -}}
tsserver = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "jsonnet-language-server" -}}
jsonnet_ls = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "marksman" -}}
marksman = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "sqls" -}}
-- sqls = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "buf" -}}
buf_ls = {},
{{- $servers = add1 $servers -}}
{{- end }}
}

local M = {}

local function on_attach(client, bufnr)
  local caps = client.server_capabilities
  -- Set autocommands conditional on server_capabilities
  if caps.codeActionProvider then
    vim.fn.sign_define("LightBulbSign", { text = "ï µ", texthl = "String", linehl = "", numhl = "" })
    local augroup = vim.api.nvim_create_augroup("CodeAction", {})
    vim.api.nvim_create_autocmd({ "CursorHold", "CursorHoldI", "InsertLeave" }, {
      group = augroup,
      buffer = bufnr,
      callback = function()
        require("nvim-lightbulb").update_lightbulb()
      end,
    })
    vim.keymap.set({ "n", "v" }, "<Leader>la", vim.lsp.buf.code_action, { buffer = true })
  end

  -- Set kepmaps regardless of server_capabilities
  vim.keymap.set("n", "gd", vim.lsp.buf.definition, { buffer = true })
  vim.keymap.set("n", "gD", vim.lsp.buf.declaration, { buffer = true })
  vim.keymap.set("n", "<Leader>D", vim.lsp.buf.type_definition, { buffer = true })
  vim.keymap.set("n", "<CR>", vim.lsp.buf.signature_help, { buffer = true })
  vim.keymap.set("i", "<C-s>", vim.lsp.buf.signature_help, { buffer = true })
  vim.keymap.set("n", "<Leader>r", vim.lsp.buf.rename, { buffer = true })
  vim.keymap.set("n", "gr", vim.lsp.buf.references, { buffer = true })
  vim.keymap.set("n", "gi", vim.lsp.buf.implementation, { buffer = true })

  if client.name == "sqls" then
    client.server_capabilities.documentFormattingProvider = false
    require("sqls").on_attach(client, bufnr)
  end
end

-- config that activates keymaps and enables snippet support
local function make_config()
  return {
    capabilities = require("cmp_nvim_lsp").default_capabilities(),
    -- map buffer local keybindings when the language server attaches
    on_attach = on_attach,
    autostart = true,
    flags = {
      debounce_text_changes = 500,
    },
  }
end

function M.setup()
  {{ if gt $servers 0 -}}
  -- Register all the LSP servers.
  local lspconfig = require("lspconfig")
  local common_config = make_config()
  for server, config in pairs(servers) do
    -- Merge per-LSP configs with the common settings, and use that:
    lspconfig[server].setup(vim.tbl_extend("keep", config, common_config))
  end
  {{- end }}
end



return M
