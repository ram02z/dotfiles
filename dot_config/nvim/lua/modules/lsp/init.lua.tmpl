-- vim: ft=lua

-- TODO: use lsp_status for capabilites
local on_attach = function(client, bufnr)
  -- Set autocommands conditional on server_capabilities
  -- TODO: add implementation capability
  if client.resolved_capabilities.goto_definition then
    vim.keymap.set(
			"n",
      "<Leader>ld",
      vim.lsp.buf.definition,
      {buffer = true}
    )
  end
  if client.resolved_capabilities.declaration then
    vim.keymap.set(
			"n",
      "<Leader>lD",
      vim.lsp.buf.declaration,
      {buffer = true}
    )
  end
  if client.resolved_capabilities.hover then
    vim.keymap.set(
			"n",
      "<CR>",
      vim.lsp.buf.hover,
      {buffer = true}
    )
  end
  if client.resolved_capabilities.code_action then
    vim.fn.sign_define('LightBulbSign', { text = "ï µ", texthl = "String", linehl="", numhl="" })
    vim.cmd([[autocmd CursorHold,CursorHoldI,InsertLeave <buffer> lua require"nvim-lightbulb".update_lightbulb()]])
    vim.keymap.set(
			"n",
      "<Leader>la",
      vim.lsp.buf.code_action,
      {buffer = true}
    )
    vim.keymap.set(
      "v",
      "<Leader>la",
      vim.lsp.buf.range_code_action,
      {buffer = true}
    )
  end
  if client.resolved_capabilities.signature_help then
    vim.keymap.set(
			"n",
      "<Leader><CR>",
      vim.lsp.buf.signature_help,
      {buffer = true}
    )
    vim.keymap.set(
      "i",
      "<C-s>",
      vim.lsp.buf.signature_help,
      {buffer = true}
    )
  end
  if client.resolved_capabilities.rename then
    vim.keymap.set(
			"n",
      "<Leader>lr",
      vim.lsp.buf.rename,
      {buffer = true}
   )
  end
  if client.resolved_capabilities.find_references then
    vim.keymap.set(
			"n",
      "<Leader>*",
      vim.lsp.buf.references,
      {buffer = true}
    )
  end
  if client.resolved_capabilities.document_formatting then
    vim.keymap.set(
			"n",
      "<Leader>lf",
      vim.lsp.buf.formatting,
      {buffer = true}
    )
  end
  if client.resolved_capabilities.document_range_formatting then
    vim.keymap.set(
      "x",
      "<Leader>lf",
      vim.lsp.buf.range_formatting,
      {buffer = true}
    )
  end
  -- if client.resolved_capabilities.code_lens then
  --   vim.api.nvim_command [[autocmd CursorHold,CursorHoldI,InsertLeave <buffer> lua vim.lsp.codelens.refresh()]]
  --   vim.keymap.set(
  --     "n",
  --     "<Leader>lc",
  --     vim.lsp.codelens.run,
  --     buffer = true,
  --   })
  -- end

  require("utils.keychord").cancel("<Leader>l", true)

  -- Additional plugins
  -- require("cmp_nvim_lsp").setup()
end

-- config that activates keymaps and enables snippet support
local make_config = function()
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  -- capabilities.textDocument.completion.completionItem.snippetSupport = true
  -- capabilities.textDocument.completion.completionItem.preselectSupport = true
  -- capabilities.textDocument.completion.completionItem.insertReplaceSupport = true
  -- capabilities.textDocument.completion.completionItem.labelDetailsSupport = true
  -- capabilities.textDocument.completion.completionItem.deprecatedSupport = true
  -- capabilities.textDocument.completion.completionItem.commitCharactersSupport = true
  -- capabilities.textDocument.completion.completionItem.tagSupport = { valueSet = { 1 } }
  -- capabilities.textDocument.completion.completionItem.resolveSupport = {
  --   properties = {
  --     "documentation",
  --     "detail",
  --     "additionalTextEdits",
  --   },
  -- }
  return {
    capabilities = require'cmp_nvim_lsp'.update_capabilities(capabilities),
    -- map buffer local keybindings when the language server attaches
    on_attach = on_attach,
    autostart = true,
    flags = {
      debounce_text_changes = 500,
    },
  }
end

local null_ls = require("null-ls")

-- register any number of sources simultaneously
local sources = {
    null_ls.builtins.formatting.prettier,
    null_ls.builtins.formatting.black,
    null_ls.builtins.formatting.isort,
    null_ls.builtins.formatting.fish_indent,
    null_ls.builtins.formatting.stylua,
    null_ls.builtins.diagnostics.flake8.with({
        diagnostics_format = "[#{c}] #{m}",
        method = null_ls.methods.DIAGNOSTICS_ON_SAVE,
        extra_args = { "--extend-ignore", "E203", "--max-line-length", "88" }
    }),
    null_ls.builtins.code_actions.gitrebase,
}

null_ls.setup({ sources = sources, on_attach = on_attach })

{{ $servers := 0 }}
-- Define enabled servers
local servers = {
{{ if lookPath "rust-analyzer" -}}
rust_analyzer = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "gopls" -}}
gopls = {
  settings = {
    gopls = {
      staticcheck = true,
    },
  },
},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "clangd" -}}
clangd = {
  cmd = {
   "clangd", "--background-index", "--pch-storage=memory",
    "--clang-tidy", "--enable-config", "--header-insertion=iwyu"
  },
},
{{- $servers = add1 $servers -}}
{{ else if lookPath "ccls" -}}
ccls = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "pyright" -}}
pyright = {
  settings = {
    python = {
      analysis = {
        useLibraryCodeForTypes = false
      }
    }
  }
},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "vscode-html-language-server" -}}
html = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "vscode-css-language-server" -}}
cssls = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "vscode-json-language-server" -}}
jsonls = {
  settings = {
    json = {
      schemas = require("schemastore").json.schemas(),
    },
  },
},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "vscode-eslint-language-server" -}}
eslint = {},
{{- $servers = add1 $servers -}}
{{- end }}
}

{{ if and (lookPath "lean") (lookPath "lean-language-server") -}}
require("lean").setup{
  abbreviations = { builtin = false },
  lsp3 = { on_attach = on_attach },
  lsp = { enable = false },
  ft = {default = "lean3" },
  mappings = true,
}
{{- end }}

{{ if gt $servers 0 -}}
-- Register all the LSP servers.
local lspconfig = require("lspconfig")
local common_config = make_config()
for server, config in pairs(servers) do
  -- Merge per-LSP configs with the common settings, and use that:
  lspconfig[server].setup(vim.tbl_extend("keep", config, common_config))
end
{{- end }}
