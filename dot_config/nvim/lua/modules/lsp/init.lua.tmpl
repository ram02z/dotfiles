-- Inspired by whynothugo's lsp config
{{ $servers := 0 }}
-- Define enabled servers
local servers = {
{{ if lookPath "rust-analyzer" -}}
rust_analyzer = {},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "gopls" -}}
gopls = {
  settings = {
    gopls = {
      staticcheck = true,
    },
  },
},
{{- $servers = add1 $servers -}}
{{- end }}
{{ if lookPath "ccls" -}}
ccls = {},
{{- $servers = add1 $servers -}}
{{- end }}
}

{{ if gt $servers 0 -}}
local lspconfig = require("lspconfig")

-- TODO: use lsp_status for capabilites
local on_attach = function(client, bufnr)
  -- Set autocommands conditional on server_capabilities
  -- TODO: add implementation, declaration and signature help
  if client.resolved_capabilities.goto_definition then
    vim.keymap.nmap({
      "<Leader>ld",
      [[<cmd>lua vim.lsp.buf.definition()<CR>]],
      silent = true,
      buffer = true,
    })
  end
  if client.resolved_capabilities.declaration then
    vim.keymap.nmap({
      "<Leader>lD",
      [[<cmd>lua vim.lsp.buf.declaration()<CR>]],
      silent = true,
      buffer = true,
    })
  end
  if client.resolved_capabilities.hover then
    vim.keymap.nmap({
      "<CR>",
      [[<cmd>lua vim.lsp.buf.hover()<CR>]],
      silent = true,
      buffer = true,
    })
  end
  if client.resolved_capabilities.code_action then
    vim.fn.sign_define('LightBulbSign', { text = "", texthl = "String", linehl="", numhl="" })
    vim.cmd([[autocmd CursorHold,CursorHoldI,InsertLeave <buffer> lua require'nvim-lightbulb'.update_lightbulb()]])
    vim.keymap.nmap({ "<Leader>la", [[<cmd>lua vim.lsp.buf.code_action()<CR>]], silent = true, buffer = true })
    -- vim.keymap.nmap({
    --   "<Leader>la",
    --   [[<cmd>lua require'modules.lsp.modules'.code_actions()<CR>]],
    --   silent = true,
    --   buffer = true,
    -- })
  end
  if client.resolved_capabilities.rename then
    vim.keymap.nmap({
      "<Leader>lr",
      [[<cmd>lua require'modules.lsp.modules'.rename()<CR>]],
      silent = true,
      buffer = true,
    })
  end
  if client.resolved_capabilities.find_references then
    vim.keymap.nmap({
      "<Leader>*",
      [[<cmd>lua vim.lsp.buf.references()<CR>]],
      silent = true,
      buffer = true,
    })
  end

  vim.keymap.nmap({
    "]d",
    [[<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>]],
    silent = true,
    buffer = true,
  })
  vim.keymap.nmap({
    "[d",
    [[<cmd>lua vim.lsp.diagnostic.goto_next()<CR>]],
    silent = true,
    buffer = true,
  })
  vim.keymap.nmap({
    "<Leader>ll",
    [[<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>]],
    silent = true,
    buffer = true,
  })

  require("utils.keychord").cancel("<Leader>l", true)

  -- Additional plugins
end

-- config that activates keymaps and enables snippet support
local make_config = function()
  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities.textDocument.completion.completionItem.snippetSupport = true
  capabilities.textDocument.completion.completionItem.resolveSupport = {
    properties = {
      "documentation",
      "detail",
      "additionalTextEdits",
    },
  }
  return {
    -- enable snippet support
    capabilities = capabilities,
    -- map buffer local keybindings when the language server attaches
    on_attach = on_attach,
    autostart = true,
    flags = {
      debounce_text_changes = 250,
    },
  }
end

-- Requires codicon font
vim.lsp.protocol.CompletionItemKind = {
  "  Text", -- = 1
  "  Function", -- = 2;
  "  Method", -- = 3;
  "  Constructor", -- = 4;
  "  Field", -- = 5;
  "  Variable", -- = 6;
  "  Class", -- = 7;
  "  Interface", -- = 8;
  "  Module", -- = 9;
  "  Property", -- = 10;
  "  Unit", -- = 11;
  "  Value", -- = 12;
  "  Enum", -- = 13;
  "  Keyword", -- = 14;
  "  Snippet", -- = 15;
  "  Color", -- = 16;
  "  File", -- = 17;
  "  Reference", -- = 18;
  "  Folder", -- = 19;
  "  EnumMember", -- = 20;
  "  Constant", -- = 21;
  "  Struct", -- = 22;
  "  Event", -- = 23;
  "  Operator", -- = 24;
  "  TypeParameter", -- = 25;
}

-- Change diagnostic symbols in the sign column
local signs = { Error = " ", Warning = " ", Hint = " ", Information = " " }

for type, icon in pairs(signs) do
  local hl = "LspDiagnosticsSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
end


-- Register all the LSP servers.
local common_config = make_config()
for server, config in pairs(servers) do
  -- Merge per-LSP configs with the common settings, and use that:
  lspconfig[server].setup(vim.tbl_extend("keep", config, common_config))
end
{{- end }}
