#!/usr/bin/env sh

# Description: Prompts all relative git directories and vimgreps their files
#              (if one/no git directories found, the cwd is used)
#
# Limitations: file names with ':' will break the script
#
# Shell: POSIX compliant

#
# Options
#

# Turning this on can slow down the grep tool
include_line_col=0 # default 0

. "$(dirname "$0")"/.nnn-plugin-helper

# Supported editors
if [ "$(cmd_exists nvim)" -eq "0" ]; then
    editor="nvim"
elif [ "$(cmd_exists vim)" -eq "0" ]; then
    editor="vim"
else
    exit 1
fi

# Supported file search utility
if [ "$(cmd_exists fd)" -eq "0" ]; then
    git_dirs=$(fd --type d -H -g '.git' --color=never --prune)
elif [ "$(cmd_exists find)" -eq "0" ]; then
    git_dirs=$(find . -type d -name '.git' -prune)
else
    exit 2
fi

# Remove git suffix and check if only one directory exists
if [ -n "$git_dirs" ]; then
    dirs=$(printf "%s" "$git_dirs" | rev | cut -d"/" -f2- | rev)
    if [ $(printf "%s" "$git_dirs" | rg . -c) -eq "1" ]; then
        [ "$dirs" != ".git" ] && cd "$dirs"
        unset dirs
    fi
fi

# Vim grep the directory
if [ "$include_line_col" -eq "0" ]; then
    RG_PREFIX="rg --with-filename --no-heading -n --smart-case --color=ansi "
else
    RG_PREFIX="rg --vimgrep --smart-case --color=ansi "
fi
if [ "$(cmd_exists fzf)" -eq "0" ]; then
    [ -n "$dirs" ] && cd $(printf "%s" "$dirs" | fzf)
    sel=$(
    FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
      fzf --bind "change:reload:$RG_PREFIX {q}" \
          --ansi --phony --query ""
    )
elif [ "$(cmd_exists sk)" -eq "0" ]; then
    [ -n "$dirs" ] && cd $(printf "%s" "$dirs" | fzf)
    sel=$(sk --ansi -i -c "$RG_PREFIX \"{}\"")
else
    exit 3
fi

if [ -n "$sel" ]; then
    # Extract file name, line number, column number
    fname=$(printf "%s" $sel | cut -f1 -d':')
    lineno=$(printf "%s" $sel | cut -f2,2 -d':')
    if [ "$include_line_col" -eq "0" ]; then
        colno="1"
    else
        colno=$(printf "%s" $sel | cut -f2,3 -d':' | cut -f2 -d':')
    fi

    # Check if file can be opened
    if [ "$fname" = "." ] || { ! [ -d "$fname" ] && ! [ -f "$fname" ]; }; then
        printf "%s cannot be opened.\n" $fname
        exit 4
    fi

    # Open file in editor
    "$editor" "$fname" "+call cursor($lineno,$colno)"
fi
