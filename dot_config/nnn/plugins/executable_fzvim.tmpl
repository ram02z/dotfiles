#!/usr/bin/env sh

# Description: Prompts all relative git directories and vimgreps their files
#              (if one/no git directories found, the cwd is used)
#
# Limitations: file names with ':' will break the script
#
# Dependencies: nvim/vim, fd,find, fzf/skim, rg, cut
#
# Shell: POSIX compliant
# Author: @ram02z
#
# Options
#

# Turning this on can slow down the grep tool
# Guaranteed to jump to specific match
print_every_match=0 # default 0

# Supported editors
{{ if lookPath "nvim" -}}
editor="nvim"
{{- else if lookPath "vim" }}
editor="vim"
{{- else }}
exit 1
{{- end }}

# Get all git directories
# Supported file search utilities
{{ if lookPath "fd" -}}
dirs=$(fd --type d -H -g '.git' --color=never --prune --exec dirname)
{{- else if lookPath "find" }}
dirs=$(find . -name .git -type d -prune | xargs -I '{}' dirname '{}')
{{- else }}
exit 2
{{- end }}

# Check print_every_match option
{{ if lookPath "rg" -}}
if [ "$print_every_match" -eq "0" ]; then
    RG_PREFIX="rg --column --no-heading --line-number --smart-case --color=ansi "
else
    RG_PREFIX="rg --vimgrep --smart-case --color=ansi "
fi
{{- else }}
# TODO: use vanilla grep
exit 3
{{- end }}

# Vim grep the directory
{{ if lookPath "fzf" -}}
[ -n "$dirs" ] && cd "$(printf "%s" "$dirs" | fzf)"
sel=$(
FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
    fzf -m --bind "change:reload:$RG_PREFIX {q} || true" \
    --ansi --phony --query ""
)
{{- else if lookPath "sk" }}
[ -n "$dirs" ] && cd "$(printf "%s" "$dirs" | sk)"
sel=$(sk --ansi -m -i -c "$RG_PREFIX \"{}\"")
{{- else }}
exit 4
{{- end }}

if [ -n "$sel" ]; then
    IFS=
    for line in $sel; do
        # Extract file name, line number, column number
        fname=$(printf "%s" "$line" | cut -f1 -d':')
        lineno=$(printf "%s" "$line" | cut -f2,2 -d':')
        colno=$(printf "%s" "$line"| cut -f2,3 -d':' | cut -f2 -d':')

        # Check for picker mode
        if [ "$3" ]; then
            if [ "$fname" ]; then
                case "$fname" in
                    /*) fullpath="$fname" ;;
                    *)  fullpath="$PWD/$fname" ;;
                esac
                if [ "-" = "$3" ]; then
                    printf "%s\n" "$fullpath"
                else
                    printf "%s\n" "$fullpath" > "$3"
                fi

                # Tell `nnn` to clear its internal selection
                printf "%s" "0p" > "$NNN_PIPE"
            fi

            exit 4
        fi

    done

    # Get first file details
    first=$(printf "%s" "$fname" | head -n 1)
    lineno=$(printf "%s" "$lineno" | head -n 1)
    colno=$(printf "%s" "$colno" | head -n 1)

    # Check if file can be opened
    if [ "$first" = "." ] || { ! [ -d "$first" ] && ! [ -f "$first" ]; }; then
        printf "%s cannot be opened.\n" "$first"
        exit 5
    fi

    # Get rest of files if selected
    more_files=
    last_line=""
    IFS='
    '
    for line in $(printf "%s" "$fname" | tail -n +2); do
       if [ "$line" != "$first" ] && [ "$last_line" != "$line" ]; then
           more_files="$more_files$line "
        fi
        last_line="$line"
    done
    # Open file(s) in editor
    # First selected file at exact pos
    # Opens rest of files; TODO find out how to open multiple files at exact pos
    "$editor" "$first" "+call cursor($lineno,$colno)" $more_files
fi
